# Generated by Django 5.1.3 on 2024-11-24 20:21

import django.db.models.deletion
import django.utils.timezone
import restaurantapp.manager
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restaurant', models.CharField(max_length=90)),
                ('city', models.CharField(max_length=30)),
                ('address', models.CharField(max_length=126)),
            ],
        ),
        migrations.CreateModel(
            name='RestaurantUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile', models.CharField(max_length=15, unique=True)),
                ('fullname', models.CharField(default='name', max_length=90)),
                ('email', models.EmailField(max_length=90)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', restaurantapp.manager.RestaurantUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Reservations',
            fields=[
                ('reservation_token', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('slot', models.TimeField()),
                ('guests', models.IntegerField()),
                ('user', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reservation_at', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('order_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('order_datetime', models.DateTimeField(auto_now=True)),
                ('table_no', models.CharField(max_length=10)),
                ('processed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reservation_token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.reservations')),
                ('from_restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=90)),
                ('type', models.CharField(max_length=20)),
                ('veg_or_nonveg', models.CharField(max_length=10)),
                ('price', models.IntegerField()),
                ('info', models.CharField(max_length=120)),
                ('available', models.BooleanField(default=True)),
                ('serving_restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='ItemsOrdered',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(max_length=30)),
                ('item_type', models.CharField(max_length=15)),
                ('veg_or_nonveg', models.CharField(max_length=15)),
                ('quantity', models.IntegerField()),
                ('item_price_from_restaurant', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.orders')),
                ('from_restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='Bills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.orders')),
                ('reservation_token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.reservations')),
                ('from_restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='RestaurantStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_of_restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='restaurantapp.restaurant')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
